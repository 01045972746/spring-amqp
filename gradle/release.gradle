/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// -----------------------------------------------------------------------------
// task definitions related to releasing the project
// -----------------------------------------------------------------------------

import org.springframework.build.gradle.tasks.UploadDist;
import org.springframework.build.Version.ReleaseType


def samplesDir = new File(project.rootDir, 'spring-amqp-samples')

// `gradle dist` will build the zip distribution
task dist(type: Zip, dependsOn: [':docs:api:doc', ':docs:reference:doc', ':docs:reference:assemble']) {
    description = 'TODO'

    destinationDir = file("${buildDir}")
    archiveName = "${project.name}-${project.version}.zip"
    def zipRootDir = "${project.name}-${project.version}"

    // set up outputs for use by incremental build and by tasks like 'cleanDist'
    // the archive zip file will be added automatically to outputs.files
    // but we must add the sha1 checksum ourselves
    outputs.files file("${destinationDir}/${archiveName}.sha1")

    doLast {
        into(zipRootDir) {
            // include all changelog.txt, readme.txt, etc in the root dir
            from("$rootDir/docs/txt") {
                include '*.txt' // e.g.: license.txt
            }
            // add the product of `gradle :docs:api:doc` to the dist zip
            into('docs/javadoc') {
                from tasks.getByPath(':docs:api:doc').destinationDir
            }
            // add the product of `gradle :docs:reference:doc` to the dist zip
            into('docs/reference') {
                from tasks.getByPath(':docs:reference:doc').docsDir
            }
            // add everything in the spring-amqp-samples directory
            into('samples') {
                from(samplesDir) {
                    exclude '*/build'   // e.g.: helloworld/build
                    exclude '*/target'  // e.g.: helloworld/target
                }
            }
            // add all jars and source jars from all core java projects
            // (i.e.: don't include sample project jars!)
            into('dist') {
                from coreprojects.collect {project -> project.libsDir }
            }
        }

        ant.checksum(file: archivePath, algorithm: 'SHA1', fileext: '.sha1')
    }
}

configurations { antlibs }
dependencies {
    antlibs "org.springframework.build:org.springframework.build.aws.ant:3.0.3.RELEASE",
            "net.java.dev.jets3t:jets3t:0.6.1"
}


task uploadDist(dependsOn: dist, type: UploadDist) {
    archiveFile = dist.archivePath
    shaFile = "${dist.archivePath}.sha1" as File
    archiveName = dist.archiveName
    classpath = configurations.antlibs
}


task checkSnapshotDeps {
    description = 'Checks for snapshot dependencies and aborts the build if found.'
    doFirst() {
        def snapshotDependencies = new HashMap<Project, List<Dependency>>()
        javaprojects.collect { project ->
            project.sourceSets.main.compileClasspath.allDependencies.each { dep ->
                if (dep.version.endsWith('SNAPSHOT')) {
                    if (snapshotDependencies[project] == null)
                        snapshotDependencies[project] = new ArrayList<Dependency>()
                    snapshotDependencies[project].add(dep)
                }
            }
        }
        if (snapshotDependencies.size() > 0) {
            println "you have snapshot dependencies"
            snapshotDependencies.each { entry ->
                println "project ${entry.key} depends on:"
                entry.value.each { dep ->
                    println "    ${dep}"
                }
            }
            throw new GradleException(
                "aborting '${name}' task due to snapshot dependencies. "
                + "supply -PignoreSnapshotDependencies to override")
        }
    }
}

task release(dependsOn: ['uploadArchives', /*'uploadDoc',*/ 'uploadDist']) {
    description = 'Releases the project including all artifact uploads.'
}

if (project.version.releaseType == ReleaseType.MILESTONE ||
    project.version.releaseType == ReleaseType.RELEASE) {
    release.dependsOn checkSnapshotDeps
}
