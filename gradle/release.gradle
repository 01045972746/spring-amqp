// -----------------------------------------------------------------------------
// task definitions related to releasing the project
// -----------------------------------------------------------------------------

import org.springframework.build.gradle.tasks.Login;
import org.springframework.build.gradle.tasks.UploadDist;
import org.springframework.build.gradle.tasks.TarUpload;

def docsDir = new File(project(':docs:reference').buildDir, 'docs')
def samplesDir = new File(project.rootDir, 'spring-amqp-samples')

// `gradle apidocs` will generate javadoc for all core production sources
task apidocs(type: Javadoc) {

    srcDir = file("${rootDir}/docs/apidocs")
    destinationDir = file("${buildDir}/apidocs")
    tmpDir = file("${buildDir}/tmp")
    optionsFile = file("${tmpDir}/apidocs/javadoc.options")
    options.stylesheetFile = file("${srcDir}/spring-javadoc.css")
    options.overview = "${srcDir}/overview.html"
    options.docFilesSubDirs = true
    title = "Spring AMQP ${version} API"

    source coreprojects.collect {project ->
        project.sourceSets.main.allJava
    }

    classpath = files(coreprojects.collect {project ->
        project.sourceSets.main.compileClasspath
    })

    // copy the images from the doc-files dir over to the target
    doLast() {
        println "src: ${srcDir}, dest: ${destinationDir}"
        copy {
            from new File($srcDir, 'doc-files')
            into new File($destinationDir, 'doc-files')
        }
    }
}

// `gradle dist` will build the zip distribution
task dist(type: Zip, dependsOn: ['apidocs', ':docs:reference:doc', ':docs:reference:assemble']) {

    destinationDir = file("${buildDir}")
    archiveName = "${project.name}-${project.version}.zip"
    def zipRootDir = "${project.name}-${project.version}"

    // set up outputs for use by incremental build and by tasks like 'cleanDist'
    // the archive zip file will be added automatically to outputs.files
    // but we must add the sha1 checksum ourselves
    outputs.files file("${destinationDir}/${archiveName}.sha1")

    into(zipRootDir) {
        // include all changelog.txt, readme.txt, etc in the root dir
        from("$rootDir/docs/txt") {
            include '*.txt' // e.g.: license.txt
        }
        // add the product of `gradle apidocs` to the dist zip
        into('docs/javadoc') {
            from apidocs.destinationDir
        }
        // add the product of `gradle doc` to the dist zip
        into('docs/reference') {
            from docsDir
        }
        // add everything in the spring-amqp-samples directory
        into('samples') {
            from(samplesDir) {
                exclude '*/build'   // e.g.: helloworld/build
                exclude '*/target'  // e.g.: helloworld/target
            }
        }
        // add all jars and source jars from all core java projects
        // (i.e.: don't include sample project jars!)
        into('dist') {
            from coreprojects.collect {project -> project.libsDir }
        }
    }

    doLast {
        ant.checksum(file: archivePath, algorithm: 'SHA1', fileext: '.sha1')
    }
}

configurations {
    antlibs
}

dependencies {
    antlibs "org.springframework.build:org.springframework.build.aws.ant:3.0.3.RELEASE",
            "net.java.dev.jets3t:jets3t:0.6.1"
}

task uploadDist(dependsOn: dist, type: UploadDist) {
    archiveFile = dist.archivePath
    shaFile = "${dist.archivePath}.sha1" as File
    archiveName = dist.archiveName
    classpath = configurations.antlibs
}

// more upload stuff
task docSiteLogin(type: Login) {
    if (project.hasProperty('sshHost')) {
        host = project.property('sshHost')
    }
}

// Define remoteSiteDir and sshHost in gradle.properties
def remoteDocsDir = null

if (hasProperty('remoteSiteDir')) {
    remoteDocsDir="$remoteSiteDir/docs/1.0.x"
}

configurations {
    scpAntTask
}

dependencies {
    scpAntTask("org.apache.ant:ant-jsch:1.8.1")
}

task uploadApidocs(type: TarUpload) {
    dependsOn apidocs
    classifier = 'apidocs'
    remoteDir = remoteDocsDir
    login = docSiteLogin
    classpath = configurations.scpAntTask

    into('apidocs') {
        from apidocs.destinationDir
    }
}

task uploadDoc(type: TarUpload) {
    dependsOn ':docs:reference:doc'
    classifier = 'doc'
    remoteDir = remoteDocsDir
    login = docSiteLogin
    classpath = configurations.scpAntTask

    into('reference') {
        from docsDir
    }
}

task(cleanDist) {
    onlyIf() {
        anyOutputFilesExist = false
        dist.outputs.files.each { file ->
            if (file.canRead()) {
                anyOutputFilesExist = true
            }
        }
        return anyOutputFilesExist;
    }
    doLast() {
        dist.outputs.files.each { file ->
            file.delete()
        }
    }
}

// TODO: done quickly, clean this up
task(cleanApidocs) {
    onlyIf() {
        apidocs.destinationDir.isDirectory()
    }
    doLast() {
        apidocs.destinationDir.deleteDir()
        apidocs.tmpDir.deleteDir()
        apidocs.outputs.files.each { file ->
            file.delete()
        }
    }
}

task('clean') {
    onlyIf() {
        file(buildDir).isDirectory()
    }

    doLast() {
        if(file(buildDir).listFiles()?.size() == 0) {
            buildDir.delete()
        } else {
            println "did not remove [${buildDir}] as it is not empty"
        }
    }
}
clean.dependsOn cleanApidocs, cleanDist



