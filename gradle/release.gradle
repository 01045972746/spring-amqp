/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.springframework.build.gradle.tasks.UploadDist;
import org.springframework.build.Version.ReleaseType

// -----------------------------------------------------------------------------
// Task definitions related to releasing the project
//
// @author cbeams
// -----------------------------------------------------------------------------

// ensure that every project has been evaluated before this script
// this allows us to look up tasks below and dereference dynamically
// assigned properties
project.subprojects.each { project ->
    evaluationDependsOn project.path
}

/**
 * Convenience task that depends on all other upload-related tasks.
 *
 * @author cbeams
 */
task release(dependsOn: ['uploadArchives', /*'uploadDoc',*/ 'uploadDist']) {
    description = 'Releases the project including all artifact uploads.'
}


/**
 * Build the distribution zip file.
 *
 * @author cbeams
 */
task dist(type: Zip) {
    dependsOn = [':spring-amqp-core:build', ':spring-rabbit:build',
                 ':spring-rabbit-admin:build', ':spring-otp:build',
                 ':docs:api:build', ':docs:reference:build',
                 ':docs:reference:assemble']

    destinationDir = buildDir
    archiveName = "${project.name}-${project.version}.zip"
    checksumPath = "${destinationDir}/${archiveName}.sha1"
    def zipRootDir = "${project.name}-${project.version}"

    description = "Builds the distribution zip file at ${destinationDir}/${archiveName}"

    // set up outputs for use by incremental build and by tasks like 'cleanDist'
    // the archive zip file will be added automatically to outputs.files
    // but we must add the sha1 checksum ourselves
    outputs.files file(checksumPath)

    // configure the contents of the zip file. remember that this is a
    // configuration phase event. no zip is being created yet. the Zip
    // task we extend will do that for us during the execution phase.
    into(zipRootDir) {
        // include all changelog.txt, readme.txt, etc in the root dir
        from("$rootDir/docs/txt") {
            include '*.txt' // e.g.: license.txt
        }
        // add the product of `gradle :docs:api:build` to the dist zip
        into('docs/javadoc') {
            from tasks.getByPath(':docs:api:build').destinationDir
        }
        // add the product of `gradle :docs:reference:build` to the dist zip
        into('docs/reference') {
            from tasks.getByPath(':docs:reference:build').docsDir
        }
        // add everything in the spring-amqp-samples directory
        into('samples') {
            from(new File(project.rootDir, 'spring-amqp-samples')) {
                exclude '*/build'   // e.g.: helloworld/build
                exclude '*/target'  // e.g.: helloworld/target
            }
        }
        // add all jars and source jars from all core java projects
        // (i.e.: don't include sample project jars!)
        into('dist') {
            from coreprojects.collect { project -> project.libsDir }
        }
    }

    // once the zip has been written, create a sha1 hash for it
    // this will write out the file at ${checksumPath}
    doLast {
        ant.checksum(file: archivePath, algorithm: 'SHA1', fileext: '.sha1')
        assert file(checksumPath).isFile() : "${checksumPath} was not created"
    }
}


/**
 * Upload the distribution zip file.
 *
 * @author cbeams
 * @see org.springframework.build.gradle.tasks.UploadDist
 */
task uploadDist(dependsOn: dist, type: UploadDist) {
    description = 'Uploads the distribution zip file.'
    archiveFile = dist.archivePath
    shaFile = dist.checksumPath as File
    archiveName = dist.archiveName

    configurations { antlibs }
    dependencies {
        antlibs "org.springframework.build:org.springframework.build.aws.ant:3.0.3.RELEASE",
                "net.java.dev.jets3t:jets3t:0.6.1"
    }

    classpath = configurations.antlibs
}


/**
 * Check all java projects for dependencies having a SNAPSHOT version and abort
 * the build if found.  This task can be used standalone at any time, but is
 * intended primarily for use during the project release workflow.  It is
 * important that any non-snapshot build be checked for snapshot dependencies
 * before final publication, as snapshot dependencies may change and thus make
 * the build unstable and/or unreproducable.
 *
 * @author cbeams
 */
task checkSnapshotDeps {
    description = 'Checks for snapshot dependencies and aborts the build if found.'

    if (project.version.releaseType == ReleaseType.MILESTONE ||
            project.version.releaseType == ReleaseType.RELEASE) {
        release.dependsOn checkSnapshotDeps
    }

    doFirst() {
        def snapshotDependencies = new HashMap<Project, List<Dependency>>()
        javaprojects.collect { project ->
            project.sourceSets.main.compileClasspath.allDependencies.each { dep ->
                if (dep.version.endsWith('SNAPSHOT')) {
                    if (snapshotDependencies[project] == null)
                        snapshotDependencies[project] = new ArrayList<Dependency>()
                    snapshotDependencies[project].add(dep)
                }
            }
        }
        if (snapshotDependencies.size() > 0) {
            println "you have snapshot dependencies"
            snapshotDependencies.each { entry ->
                println "project ${entry.key} depends on:"
                entry.value.each { dep ->
                    println "    ${dep}"
                }
            }
            throw new GradleException(
                "aborting '${name}' task due to snapshot dependencies. "
                + "supply -PignoreSnapshotDependencies to override")
        }
    }
}

