/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// -----------------------------------------------------------------------------
// Main gradle build file for Spring AMQP
//
// - run `./gradlew(.bat) build` to kick off a complete compile-test-package
//
// - the imports above are from groovy and/or java classes in buildSrc/
//   or from jars on 'buildscript' classpath (in our case, it's all buildSrc)
//   sources in buildSrc are compiled and placed on the classpath automatically
//
// @author cbeams
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Configuration for all projects including this one (the root project)
//
// @see settings.gradle for list of all subprojects
// -----------------------------------------------------------------------------

apply from: "$rootDir/gradle/version.gradle"
apply plugin: 'idea'


allprojects {
    // group will translate to groupId during pom generation and deployment
    group = 'org.springframework.amqp'

    // version will be used in maven pom generation as well as determining
    // where artifacts should be deployed, based on release type of snapshot,
    // milestone or release.
    // @see org.springframework.build.Version under buildSrc/ for more info
    // @see gradle.properties for the declaration of this property.
    version = createVersion(springAmqpVersion)

    // defoult set of maven repositories to be used when resolving dependencies
    repositories {
        mavenRepo urls: 'http://maven.springframework.org/snapshot'
        mavenCentral()
        mavenRepo urls: 'http://repository.springsource.com/maven/bundles/milestone'
        mavenRepo urls: 'http://maven.springframework.org/release'
        mavenRepo urls: 'http://repository.springsource.com/maven/bundles/release'
        mavenRepo urls: 'http://repository.springsource.com/maven/bundles/external'
    }

}


// -----------------------------------------------------------------------------
// Configuration for all subprojects
// - empty for now, but shown for completeness
//
// @see settings.gradle for list of all subprojects
// -----------------------------------------------------------------------------
subprojects { }


// -----------------------------------------------------------------------------
// Create collections of subprojects - each will receive their own configuration
// - all subprojects within spring-amqp-samples are 'sample projects'
// - all subprojects that start with spring-* are 'java projects'
// - all non-sample java projects are considered 'core projects'
// - documentation-related subprojects are not collected here
//
// @see configure(*) sections below
// -----------------------------------------------------------------------------
sampleparent = project(':spring-amqp-samples')

sampleprojects = sampleparent.subprojects

javaprojects = subprojects.findAll { project ->
    project.path.startsWith(':spring-') && project != sampleparent
}

coreprojects = javaprojects - sampleprojects


// -----------------------------------------------------------------------------
// Configuration for all java subprojects
// -----------------------------------------------------------------------------
configure(javaprojects) {
    apply plugin: 'java' // tasks for conventional java lifecycle
    apply plugin: 'maven' // `gradle install` to push jars to local .m2 cache
    apply plugin: 'eclipse' // `gradle eclipse` to generate .classpath/.project
    apply plugin: 'idea' // `gradle idea` to generate .ipr/.iml

    springVersion = '3.0.3.RELEASE'
    rabbitVersion = '2.1.0'
    erlangVersion = '1.5.3'
    slf4jVersion = '1.5.10'
    junitVersion = '4.8.1'

    // dependencies that are common across all java projects
    dependencies {
        testCompile "junit:junit:$junitVersion"
    }

    // enable all compiler warnings (GRADLE-1077)
    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

    // generate .classpath files without GRADLE_CACHE variable (GRADLE-1079)
    eclipseClasspath.variables = [:]
}


// -----------------------------------------------------------------------------
// Configuration for all core (non-sample) java subprojects
//
// @see individual project(*) configurations below
// -----------------------------------------------------------------------------
configure(coreprojects) {
    // certain projects will need erlang licensing in addition to Apache.
    // false by default, but certain projects will assign true
    erlangLicense = false

    // all core projects should be OSGi-compliant bundles
    // add the bundlor task to ensure proper manifests
    apply from: "$rootDir/gradle/bundlor.gradle"
    apply from: "$rootDir/gradle/maven-deployment.gradle"

    // dependencies common to all core projects
    dependencies {
        compile ('log4j:log4j:1.2.15') {
            exclude group: 'javax.mail', name: 'mail'
            exclude group: 'javax.jms', name: 'jms'
            exclude group: 'com.sun.jdmk', name: 'jmxtools'
            exclude group: 'com.sun.jmx', name: 'jmxri'
        }
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
    }

    test.exclude '**/*IntegrationTests.class'
}


// -----------------------------------------------------------------------------
// Configuration for all sample projects
//
// @see individual project(*) configurations below
// -----------------------------------------------------------------------------
configure(sampleprojects) {
    apply from: "${sampleparent.projectDir}/pom-generation.gradle"

    // samples group will translate to their maven groupId
    group = 'org.springframework.amqp.samples'

    // dependencies common ta all sample projects
    dependencies {
        compile project(':spring-amqp')
        compile project(':spring-rabbit')
        compile project(':spring-rabbit-admin')
        compile "com.rabbitmq:amqp-client:$rabbitVersion"
        compile "org.springframework:spring-aop:$springVersion"
        compile "org.springframework:spring-oxm:$springVersion"
        runtime 'log4j:log4j:1.2.14'
        runtime 'cglib:cglib-nodep:2.2'
        runtime 'aspectj:aspectjrt:1.5.4'
        runtime 'aspectj:aspectjweaver:1.5.4'
        runtime "org.springframework:spring-context-support:$springVersion"
        testCompile "org.springframework:spring-test:$springVersion"
    }
}


// -----------------------------------------------------------------------------
// Configuration for each individual core java subproject
//
// @see configure(javaprojects) above for general config
// -----------------------------------------------------------------------------
project('spring-amqp') {
    dependencies {
        compile "org.springframework:spring-core:$springVersion"
        // TODO exclude commons-logging/commons-logging?
        compile "org.springframework:spring-oxm:$springVersion"
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.4.3'
    }
}

project('spring-erlang') {
    erlangLicense = true

    dependencies {
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.erlang.otp:jinterface:$erlangVersion"
    }
}

project('spring-rabbit') {
    dependencies {
        compile project(':spring-amqp')
        compile "com.rabbitmq:amqp-client:$rabbitVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.springframework:spring-aop:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-oxm:$springVersion"
        compile "org.springframework:spring-tx:$springVersion"
        compile "org.springframework.commons:spring-commons-retry:1.0.0.BUILD-SNAPSHOT"
        testCompile 'org.mockito:mockito-all:1.8.4'
        testCompile "org.springframework:spring-test:$springVersion"
    }
}

project('spring-rabbit-admin') {
    erlangLicense = true

    dependencies {
        compile project(':spring-amqp')
        compile project(':spring-erlang')
        compile project(':spring-rabbit')
        compile "com.rabbitmq:amqp-client:$rabbitVersion"
        compile "org.springframework:spring-aop:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-oxm:$springVersion"
        compile "org.springframework:spring-test:$springVersion"
        compile "org.springframework:spring-tx:$springVersion"
        compile "junit:junit:$junitVersion"
        testCompile "org.erlang.otp:jinterface:$erlangVersion"
        testCompile "org.springframework:spring-beans:$springVersion"
        testCompile "org.springframework:spring-core:$springVersion"
    }
}


// -----------------------------------------------------------------------------
// Configuration for each individual sample subproject
//
// @see configure(sampleprojects) above for general config
// -----------------------------------------------------------------------------
project(':spring-amqp-samples:helloworld') {
    generatePom {
        artifactId = 'helloworld'
        artifactName = 'Spring AMQP Hello World'
        artifactDescription = 'Shows the usage of Spring AMQP integration classes'
    }
}

project(':spring-amqp-samples:stocks') {
    dependencies {
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "com.jgoodies:forms:1.2.1"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
    }

    generatePom {
        artifactId = 'stocks'
        artifactName = 'Spring Rabbit Stocks'
        artifactDescription = 'Shows the usage of Spring Rabbit integration classes'
    }

    // Client and Server @Test cases need a local rabbitmq-server running. Skip
    // the test task if there isn't one up.
    test.onlyIf {
        if (project.hasProperty('forceServerTests'))
            return true

        def port = 5672
        try {
            new java.net.Socket("localhost", port)
            return true
        } catch (java.net.ConnectException ex) {
            println "Tests will be skipped as rabbitmq-server is not running " +
                    "on port ${port}. Start a local rabbitmq-server process " +
                    "or run gradle with '-PforceServerTests'"
            return false
        }
    }
}


// add basic tasks like 'clean' and 'assemble' to the root project. e.g.: allows
// running `gradle clean` from the root project and deleting the build directory
apply plugin: 'base'

// add tasks like 'distArchive'
apply from: "$rootDir/gradle/dist.gradle"

// add tasks like 'snapshotDependencyCheck'
apply from: "${rootDir}/gradle/checks.gradle"


// -----------------------------------------------------------------------------
// Import tasks related to releasing and managing the project
// depending on the role played by the current user.
//
// @see gradle.properties for more information on roles
// -----------------------------------------------------------------------------
// add management tasks like `wrapper` for generating the gradlew* scripts
apply from: "$rootDir/gradle/wrapper.gradle"
