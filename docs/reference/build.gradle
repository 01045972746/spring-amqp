/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// -----------------------------------------------------------------------------
// Reference documentation gradle build file.
//
// The 'docbook' plugin applied here was written in-house and works sufficiently
// well. However, there is an 'offical' gradle docbook plugin effort underway
// and effort should be taken to refactor to using it
//
// @author cbeams
// @see http://github.com/gradle/gradle-jdocbook
// -----------------------------------------------------------------------------

buildscript {
    repositories {
        mavenCentral()
        mavenRepo name: 'Shibboleth Repo', urls: 'http://shibboleth.internet2.edu/downloads/maven2'
    }
    dependencies {
        def fopDeps = ['org.apache.xmlgraphics:fop:0.95-1@jar',
                'org.apache.xmlgraphics:xmlgraphics-commons:1.3',
                'org.apache.xmlgraphics:batik-bridge:1.7@jar',
                'org.apache.xmlgraphics:batik-util:1.7@jar',
                'org.apache.xmlgraphics:batik-css:1.7@jar',
                'org.apache.xmlgraphics:batik-dom:1.7',
                'org.apache.xmlgraphics:batik-svg-dom:1.7@jar',
                'org.apache.avalon.framework:avalon-framework-api:4.3.1']

        classpath files("${rootDir}/gradle/docbook-1.0.jar"), 
                'org.apache.xerces:resolver:2.9.1',
                'saxon:saxon:6.5.3',
                'org.apache.xerces:xercesImpl:2.9.1',
                fopDeps,
                'net.sf.xslthl:xslthl:2.0.1',
                'net.sf.docbook:docbook-xsl:1.75.2:resources@zip'

    }

}

apply plugin: 'base'
apply plugin: 'docbook'

/**
 * Expand ${...} variables within docbook sources. This is a workaround
 * accomodating the fact that the current docbook plugin has no way of
 * parameterizing and replacing normal XML entities.
 *
 * Note that this task represents an implementation detail and it is
 * unfortunate that it pollutes the listing of available tasks, e.g.
 * during `gradle -t`. It's a good example of the need for 'task visibility' -
 * a feature not yet implemented, but on the Gradle roadmap.
 *
 * @author cbeams
 * @see http://jira.codehaus.org/browse/GRADLE-1026
 */
task preprocessDocbookSources {
    description = 'Expands ${...} variables within docbook sources.'

    doLast {
        docbookSrcDir = new File(projectDir, 'src/docbook')
        docbookBuildDir = new File(projectDir, 'build/docbook')

        // copy everything but index.xml
        copy {
            into(docbookBuildDir)
            from(docbookSrcDir) { exclude '**/index.xml' }
        }
        // copy index.xml and expand ${...} variables along the way
        // e.g.: ${version} needs to be replaced in the header
        copy {
            into(docbookBuildDir)
            from(docbookSrcDir) { include '**/index.xml' }
            expand(version: "$version")
        }
    }
}

// -----------------------------------------------------------------------------
// Configure the three docbook* tasks that are added to the project by the
// 'docbook' plugin.
// -----------------------------------------------------------------------------
[docbookHtml, docbookPdf, docbookHtmlSingle]*.sourceFileName = 'index.xml';
[docbookHtml, docbookHtmlSingle, docbookPdf]*.dependsOn preprocessDocbookSources

docbookHtml.stylesheet = new File(projectDir, 'src/xsl/html-custom.xsl')
docbookHtmlSingle.stylesheet = new File(projectDir, 'src/xsl/html-single-custom.xsl')
docbookPdf.stylesheet = new File(projectDir, 'src/xsl/pdf-custom.xsl')
def imagesDir = new File(projectDir, 'src/docbook/images');
docbookPdf.admonGraphicsPath = "${imagesDir}/"

/**
 *
 * @see http://www.gradle.org/0.9-preview-3/docs/userguide/userguide_single.html#sec:copying_files
 * @see http://www.gradle.org/0.9-preview-3/docs/javadoc/org/gradle/api/file/CopySpec.html
 */
docsSpec = copySpec {
    into('reference') {
        // copy everything from the docs dir
        from("${buildDir}/docs")
    }

    // copy images and css into respective html dirs
    ['html', 'htmlsingle'].each { dir ->
        into("reference/${dir}/images") {
            from "${projectDir}/src/docbook/images"
        }
        into("reference/${dir}/css") {
            from "${projectDir}/src/resources/css"
        }
    }
}


task docsArchive(type: Tar, dependsOn: [docbookHtml, docbookHtmlSingle, docbookPdf]) {
    description = "Create a tbz2 archive of HTML and PDF reference documentation."

    baseName = rootProject.name + '-reference'
    compression = Compression.BZIP2

    with docsSpec
}

apply from: '../uploadDocs.gradle'
