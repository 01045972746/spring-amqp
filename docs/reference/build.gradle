/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// -----------------------------------------------------------------------------
// Reference documentation gradle build file.
//
// The 'docbook' plugin applied here was written in-house and works sufficiently
// well. However, there is an 'offical' gradle docbook plugin effort underway
// and effort should be taken to refactor to using it
//
// @author cbeams
// @see http://github.com/gradle/gradle-jdocbook
// -----------------------------------------------------------------------------

apply plugin: 'base'
apply plugin: 'docbook'

/**
 * Expand ${...} variables within docbook sources. This is a workaround
 * accomodating the fact that the current docbook plugin has no way of
 * parameterizing and replacing normal XML entities.
 *
 * Note that this task represents an implementation detail and it is
 * unfortunate that it pollutes the listing of available tasks, e.g.
 * during `gradle -t`. It's a good example of the need for 'task visibility' -
 * a feature not yet implemented, but on the Gradle roadmap.
 *
 * @author cbeams
 * @see http://jira.codehaus.org/browse/GRADLE-1026
 */
task preprocessDocbookSources {
    description = 'Expands ${...} variables within docbook sources.'

    doLast {
        docbookSrcDir = new File(projectDir, 'src/docbook')
        docbookBuildDir = new File(projectDir, 'build/docbook')

        // copy everything but index.xml
        copy {
            into(docbookBuildDir)
            from(docbookSrcDir) { exclude '**/index.xml' }
        }
        // copy index.xml and expand ${...} variables along the way
        // e.g.: ${version} needs to be replaced in the header
        copy {
            into(docbookBuildDir)
            from(docbookSrcDir) { include '**/index.xml' }
            expand(version: "$version")
        }
    }
}


// -----------------------------------------------------------------------------
// Configure the three docbook* tasks that are added to the project by the
// 'docbook' plugin.
// -----------------------------------------------------------------------------
[docbookHtml, docbookPdf, docbookHtmlSingle]*.sourceFileName = 'index.xml';
[docbookHtml, docbookHtmlSingle, docbookPdf]*.dependsOn preprocessDocbookSources

docbookHtml.stylesheet = new File(projectDir, 'src/xsl/html-custom.xsl')
docbookHtmlSingle.stylesheet = new File(projectDir, 'src/xsl/html-single-custom.xsl')
docbookPdf.stylesheet = new File(projectDir, 'src/xsl/pdf-custom.xsl')
def imagesDir = new File(projectDir, 'src/docbook/images');
docbookPdf.admonGraphicsPath = "${imagesDir}/"


configurations { scpAntTask }
dependencies {
    scpAntTask("org.apache.ant:ant-jsch:1.8.1")
}


/**
 *
 * @see http://www.gradle.org/0.9-preview-3/docs/userguide/userguide_single.html#sec:copying_files
 * @see http://www.gradle.org/0.9-preview-3/docs/javadoc/org/gradle/api/file/CopySpec.html
 */
docsSpec = copySpec {
    into('reference') {
        // copy everything from the docs dir
        from("${buildDir}/docs")
    }

    // copy images and css into respective html dirs
    ['html', 'htmlsingle'].each { dir ->
        into("reference/${dir}/images") {
            from "${projectDir}/src/docbook/images"
        }
        into("reference/${dir}/css") {
            from "${projectDir}/src/resources/css"
        }
    }
}


/**
 * Build HTML and PDF reference documentation from docbook sources.
 *
 * @author cbeams
 */
task build (dependsOn: assemble) {
    //description = 'Builds reference documentation in html, html-single and PDF formats.'
}


task docsArchive(type: Tar, dependsOn: [docbookHtml, docbookHtmlSingle, docbookPdf]) {
    description = "Create a tbz2 archive of HTML and PDF reference documentation."

    baseName = rootProject.name + '-reference'
    compression = Compression.BZIP2

    with docsSpec
}

configurations { archives }
artifacts { archives docsArchive }

if (role == 'buildmaster') {
    uploadArchives {
        def docUrl = "http://${sshHost}/${rootProject.name}/docs/${version.wildcardValue}/reference"
        def remoteDocsDir = "${remoteSiteDir}/docs/${version.wildcardValue}"
        def fqRemoteDir = "${sshUsername}@${sshHost}:${remoteDocsDir}"

        description = "Uploads HTML and PDF reference documentation to ${docUrl}"

        uploadDescriptor = false

        repositories {
            add(new org.apache.ivy.plugins.resolver.SshResolver()) {
                name = sshHost // used for debugging
                host = sshHost
                user = sshUsername
                keyFile = sshPrivateKey as File
                addArtifactPattern "${remoteDocsDir}/${docsArchive.archiveName}"
            }
        }

        configurations { scpAntTask }
        dependencies { scpAntTask 'org.apache.ant:ant-jsch:1.8.1' }

        doFirst {
            println "Uploading: ${docsArchive.archivePath} to ${fqRemoteDir}"
        }

        doLast {
            project.ant {
                taskdef(name: 'sshexec',
                    classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                    classpath: configurations.scpAntTask.asPath)

                // copy the archive, unpack it, then delete it
                def unpackCommand = "cd ${remoteDocsDir} && tar -xjf ${docsArchive.archiveName}"
                def deleteCommand = "rm ${remoteDocsDir}/${docsArchive.archiveName}"

                println "sshexec ${unpackCommand}"
                sshexec(host: sshHost, username: sshUsername, keyfile: sshPrivateKey, command: unpackCommand)
                println "sshexec ${deleteCommand}"
                sshexec(host: sshHost, username: sshUsername, keyfile: sshPrivateKey, command: deleteCommand)
                println "UPLOAD SUCCESSFUL - validate by visiting ${docUrl}"
            }
        }
    }
}
