/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// -----------------------------------------------------------------------------
// Reference documentation gradle build file.
//
// The 'docbook' plugin applied here was written in-house and works sufficiently
// well. However, there is an 'offical' gradle docbook plugin effort underway
// and effort should be taken to refactor to using it
//
// see: http://github.com/gradle/gradle-jdocbook
// -----------------------------------------------------------------------------

import org.springframework.build.gradle.tasks.Login;
import org.springframework.build.gradle.tasks.TarUpload;

apply plugin: 'base'
apply plugin: 'docbook'


// -----------------------------------------------------------------------------
// Configure the three docbook* tasks that are added to the project by the
// 'docbook' plugin.
// -----------------------------------------------------------------------------
[docbookHtml, docbookPdf, docbookHtmlSingle]*.sourceFileName = 'index.xml';

docbookHtml.stylesheet = new File(projectDir, 'src/xsl/html-custom.xsl')
docbookHtmlSingle.stylesheet = new File(projectDir, 'src/xsl/html-single-custom.xsl')
docbookPdf.stylesheet = new File(projectDir, 'src/xsl/pdf-custom.xsl')
def imagesDir = new File(projectDir, 'src/docbook/images');
docbookPdf.admonGraphicsPath = "${imagesDir}/"

/**
 * Build HTML and PDF reference documentation from docbook sources.
 */
task build (dependsOn: [docbookHtml, docbookHtmlSingle, docbookPdf]) {
    description = 'Builds reference documentation in html, html-single and PDF formats.'

    // expand ${...} variables within docbook sources. this is a workaround
    // accomodating the fact that the current docbook plugin has no way of
    // parameterizing and replacing normal XML entities.
    //
    // note that this work is done at configuration time (as opposed to
    // execution time in the doLast block below) to ensure that the copying
    // and filtering happens prior to any of the three actual docbook tasks
    // executing. this could be modeled as a task dependency, but the task
    // would be an implementation detail and would pollute the available set
    // of tasks. 'task visibility', including 'private tasks' is a desirable
    // feature in Gradle, and is on the roadmap.
    //
    // see http://jira.codehaus.org/browse/GRADLE-1026 for more info.

    docbookSrcDir = new File(projectDir, 'src/docbook')
    docbookBuildDir = new File(projectDir, 'build/docbook')
    docsDir = new File(buildDir, 'docs')
    resourcesDir = new File(projectDir, 'src/resources')

    // copy all non-xml sources
    copy {
        into(docbookBuildDir)
        from(docbookSrcDir) { exclude '**/*.xml' }
    }
    // copy all xml sources, and expand ${...} variables along the way
    // e.g.: ${version} needs to be replaced in the first page of the
    copy {
        into(docbookBuildDir)
        from(docbookSrcDir) { include '**/*.xml' }
        expand(version: "$version")
    }

    onlyIf {
        dependsOnTaskDidWork()
    }
    doLast {
        ant {
            copy(toDir: docsDir) { fileset(dir: resourcesDir) }
            copy(toDir: new File(docsDir, 'images')) { fileset(dir: imagesDir) }
        }
    }
}

/*
// TODO: get rid of
task docSiteLogin(type: Login) {
    if (project.hasProperty('sshHost')) {
        host = project.property('sshHost')
    }
}

// Define remoteSiteDir and sshHost in gradle.properties
def remoteDocsDir = null

if (hasProperty('remoteSiteDir')) {
    remoteDocsDir="$remoteSiteDir/docs/1.0.x"
}

configurations { scpAntTask }
dependencies {
    scpAntTask("org.apache.ant:ant-jsch:1.8.1")
}

task uploadDoc(type: TarUpload, dependsOn: doc) {
    description = "upload reference HTML and PDF docs to http://${sshHost}/${project.name}/docs/${project.version.wildcardValue}/reference"
    classifier = 'doc'
    remoteDir = remoteDocsDir
    login = docSiteLogin
    classpath = configurations.scpAntTask

    into('reference') {
        from doc.docsDir
    }
}
*/

