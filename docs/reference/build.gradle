/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.springframework.build.gradle.tasks.Login;
import org.springframework.build.gradle.tasks.TarUpload;

// -----------------------------------------------------------------------------
// Reference documentation gradle build file.
//
// The 'docbook' plugin applied here was written in-house and works sufficiently
// well. However, there is an 'offical' gradle docbook plugin effort underway
// and effort should be taken to refactor to using it
//
// @author cbeams
// @see http://github.com/gradle/gradle-jdocbook
// -----------------------------------------------------------------------------

apply plugin: 'base'
apply plugin: 'docbook'

/**
 * Expand ${...} variables within docbook sources. This is a workaround
 * accomodating the fact that the current docbook plugin has no way of
 * parameterizing and replacing normal XML entities.
 *
 * Note that this task represents an implementation detail and it is
 * unfortunate that it pollutes the listing of available tasks, e.g.
 * during `gradle -t`. It's a good example of the need for 'task visibility' -
 * a feature not yet implemented, but on the Gradle roadmap.
 *
 * @author cbeams
 * @see http://jira.codehaus.org/browse/GRADLE-1026 for more info.
 */
task preprocessDocbookSources {
    description = 'Expands ${...} variables within docbook sources.'

    doLast {
        docbookSrcDir = new File(projectDir, 'src/docbook')
        docbookBuildDir = new File(projectDir, 'build/docbook')

        // copy all non-xml sources
        copy {
            into(docbookBuildDir)
            from(docbookSrcDir) { exclude '**/*.xml' }
        }
        // copy all xml sources, and expand ${...} variables along the way
        // e.g.: ${version} needs to be replaced in the first page of the
        copy {
            into(docbookBuildDir)
            from(docbookSrcDir) { include '**/*.xml' }
            expand(version: "$version")
        }
    }
}


// -----------------------------------------------------------------------------
// Configure the three docbook* tasks that are added to the project by the
// 'docbook' plugin.
// -----------------------------------------------------------------------------
[docbookHtml, docbookPdf, docbookHtmlSingle]*.sourceFileName = 'index.xml';
[docbookHtml, docbookHtmlSingle, docbookPdf]*.dependsOn preprocessDocbookSources

docbookHtml.stylesheet = new File(projectDir, 'src/xsl/html-custom.xsl')
docbookHtmlSingle.stylesheet = new File(projectDir, 'src/xsl/html-single-custom.xsl')
docbookPdf.stylesheet = new File(projectDir, 'src/xsl/pdf-custom.xsl')
def imagesDir = new File(projectDir, 'src/docbook/images');
docbookPdf.admonGraphicsPath = "${imagesDir}/"


/**
 * Build HTML and PDF reference documentation from docbook sources.
 *
 * @author cbeams
 */
task build (dependsOn: [docbookHtml, docbookHtmlSingle, docbookPdf]) {
    description = 'Builds reference documentation in html, html-single and PDF formats.'

    docsDir = new File(buildDir, 'docs')
    resourcesDir = new File(projectDir, 'src/resources')

    doLast {
        ant {
            copy(toDir: docsDir) { fileset(dir: resourcesDir) }
            copy(toDir: new File(docsDir, 'images')) { fileset(dir: imagesDir) }
        }
    }
}

// TODO: get rid of
task docSiteLogin(type: Login) {
    if (project.hasProperty('sshHost')) {
        host = project.property('sshHost')
    }
}

// Define remoteSiteDir and sshHost in gradle.properties
def remoteDocsDir = null

if (hasProperty('remoteSiteDir')) {
    remoteDocsDir="$remoteSiteDir/docs/1.0.x"
}

configurations { scpAntTask }
dependencies {
    scpAntTask("org.apache.ant:ant-jsch:1.8.1")
}

/**
 * Upload HTML and PDF reference documentation via SSH (scp).
 *
 * @author cbeams
 * @author ltaylor
 */
task upload(type: TarUpload, dependsOn: build) {
    def docUrl = "http://${sshHost}/${project.name}/docs/${project.version.wildcardValue}/reference"
    description = "Uploads HTML and PDF reference documentation to ${docUrl}"
    classifier = 'reference'
    remoteDir = remoteDocsDir
    login = docSiteLogin
    classpath = configurations.scpAntTask

    into('reference') {
        from build.docsDir
    }
}
