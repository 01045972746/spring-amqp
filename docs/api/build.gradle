/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// -----------------------------------------------------------------------------
// API documentation gradle build file.
//
// @author cbeams
// -----------------------------------------------------------------------------

apply plugin: 'base'

/**
 * Build aggregated JavaDoc HTML for all core project classes.  Result is
 * suitable for packaging into a distribution zip or viewing directly with
 * a browser.
 *
 * @author cbeams
 * @author ltaylor
 * @see http://gradle.org/0.9-preview-3/docs/javadoc/org/gradle/api/tasks/javadoc/Javadoc.html
 */
 task aggregateJavadoc(type: Javadoc) {
    description = "Builds aggregated JavaDoc HTML for all core project classes."

    // this task is a bit ugly to configure. it was a user contribution, and
    // Hans tells me it's on the roadmap to redesign it.
    srcDir = file("${projectDir}/src")
    destinationDir = buildDir
    tmpDir = file("${buildDir}/tmp")
    optionsFile = file("${tmpDir}/apidocs/javadoc.options")
    options.stylesheetFile = file("${srcDir}/spring-javadoc.css")
    options.overview = "${srcDir}/overview.html"
    options.docFilesSubDirs = true
    title = "Spring AMQP ${version} API"

    // collect all the sources that will be included in the javadoc output
    source coreprojects.collect {project ->
        project.sourceSets.main.allJava
    }

    // collect all main classpaths to be able to resolve @see refs, etc.
    // this collection also determines the set of projects that this
    // task dependsOn, thus the runtimeClasspath is used to ensure all
    // projects are included, not just *dependencies* of all classes.
    // this is awkward and took me a while to figure out.
    classpath = files(coreprojects.collect {project ->
        project.sourceSets.main.runtimeClasspath
    })

    // copy the images from the doc-files dir over to the target
    doLast { task ->
        copy {
            from file("${task.srcDir}/doc-files")
            into file("${task.destinationDir}/doc-files")
        }
    }
}


/**
 *
 * @see http://www.gradle.org/0.9-preview-3/docs/userguide/userguide_single.html#sec:copying_files
 * @see http://www.gradle.org/0.9-preview-3/docs/javadoc/org/gradle/api/file/CopySpec.html
 */
docsSpec = copySpec {
    into('api') {
        from(buildDir) {
            exclude 'tmp'
        }
    }
}

task docsArchive(type: Tar, dependsOn: aggregateJavadoc) {
    description = "Create a tbz2 archive of API javadoc."

    baseName = rootProject.name + '-api'
    compression = Compression.BZIP2

    with docsSpec
}

apply from: '../uploadDocs.gradle'
